//
// ArticlesAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class ArticlesAPI {

    /**
     News List
     
     - parameter accessKey: (query) Api key 
     - parameter languages: (query) Languages (optional)
     - parameter categories: (query) Category (optional)
     - parameter keywords: (query) Keywords (optional)
     - parameter offset: (query) Keywords (optional)
     - parameter limit: (query) Keywords (optional)
     - parameter date: (query) Date (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func everythingGet(accessKey: String, languages: String? = nil, categories: String? = nil, keywords: String? = nil, offset: Int? = nil, limit: Int? = nil, date: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: NewsList?, _ error: Error?) -> Void)) -> RequestTask {
        return everythingGetWithRequestBuilder(accessKey: accessKey, languages: languages, categories: categories, keywords: keywords, offset: offset, limit: limit, date: date).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     News List
     - GET /news
     - parameter accessKey: (query) Api key 
     - parameter languages: (query) Languages (optional)
     - parameter categories: (query) Category (optional)
     - parameter keywords: (query) Keywords (optional)
     - parameter offset: (query) Keywords (optional)
     - parameter limit: (query) Keywords (optional)
     - parameter date: (query) Date (optional)
     - returns: RequestBuilder<NewsList> 
     */
    open class func everythingGetWithRequestBuilder(accessKey: String, languages: String? = nil, categories: String? = nil, keywords: String? = nil, offset: Int? = nil, limit: Int? = nil, date: String? = nil) -> RequestBuilder<NewsList> {
        let localVariablePath = "/news"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "access_key": (wrappedValue: accessKey.encodeToJSON(), isExplode: true),
            "languages": (wrappedValue: languages?.encodeToJSON(), isExplode: true),
            "categories": (wrappedValue: categories?.encodeToJSON(), isExplode: true),
            "keywords": (wrappedValue: keywords?.encodeToJSON(), isExplode: true),
            "offset": (wrappedValue: offset?.encodeToJSON(), isExplode: true),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "date": (wrappedValue: date?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<NewsList>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }
}
